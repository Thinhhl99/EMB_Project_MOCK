#ifndef __S32K144_PCC_H__
#define __S32K144_PCC_H__

#include <stdint.h>
#include "common.h"

typedef union {
	uint32_t REG;
	struct {
		RO uint32_t RES01 	: 30;
		RW uint32_t CGC 		: 1;
		RO uint32_t RES02 	: 1;
	} FIELD;
} S32K144_PERPHERAL_CLOCK_CONTROLLER_t;

typedef union {
	uint32_t REG;
	struct{
		RO uint32_t RES01 :24;
		RW uint32_t PCS		:3;
		RO uint32_t RES02	:3;
		RW uint32_t CGC		:1;
		RO uint32_t RES03	:1;
	}FIELD;
}LPUART_REG_t;

typedef union {
	uint32_t REG;
	struct{
		RO uint32_t RES01 :24;
		RW uint32_t PCS		:3;
		RO uint32_t RES02	:3;
		RW uint32_t CGC		:1;
		RO uint32_t RES03	:1;
	}FIELD;
}LPSPI_n_REG_t;

typedef union {
	uint32_t REG;
	struct{
		RO uint32_t RES01 :24;
		RW uint32_t PCS		:3;
		RO uint32_t RES02	:3;
		RW uint32_t CGC		:1;
		RO uint32_t RES03	:1;
	}FIELD;
}LPIT_REG_t;
typedef struct {
	/*IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_DMAMUX;
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_FlexCAN0;
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_FlexCAN1;
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_FTM3;
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_ADC1;
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_FlexCAN2;*/
	IO    LPSPI_n_REG_t 											 PCC_LPSPI0;
	IO    LPSPI_n_REG_t												 PCC_LPSPI1;
	IO    LPSPI_n_REG_t												 PCC_LPSPI2;
	IO RO uint32_t														 RES0000[2];
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_PDB1;
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_CRC;
	IO RO uint32_t														 RES0001[3];
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_PDB0;
	IO    LPIT_REG_t													 PCC_LPIT;
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_FTM0;
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_FTM1;
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_FTM2;
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_ADC0;
	IO RO uint32_t														 RES000[1];
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_RTC;
	IO RO uint32_t														 RES001[2];
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_LPTMR0;
	IO RO uint32_t														 RES002[8];
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_PORTA;
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_PORTB;
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_PORTC;
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_PORTD;
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_PORTE;
	IO RO	uint32_t														 RES01[6];
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_SAI0;
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_SAI1;
	IO		uint32_t														 RES02[4];
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_FlexIO;
	IO RO	uint32_t													 	 RES03[6];
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_EWM;
	IO RO	uint32_t														 RES04[4];
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_LPI2C0;
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_LPI2C1;
	IO RO	uint32_t														 RES05[2];
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_LPUART0;
	IO    LPUART_REG_t 											   PCC_LPUART1;
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_LPUART2;
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_FTM4;
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_FTM5;
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_FTM6;
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_FTM7;
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_CMP0;
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_QSPI;
	IO    S32K144_PERPHERAL_CLOCK_CONTROLLER_t PCC_ENET;
} PCC_t;


/* define PCC base address */
#define PCC_BASE 								(0x40065000u)		

/* define PCC's register offset */ 
//#define PCC_PORTA_OFFSET        (0x124u)
//#define PCC_PORTB_OFFSET        (0x128u)
//#define PCC_PORTC_OFFSET        (0x12Cu)
//#define PCC_PORTD_OFFSET        (0x130u)
//#define PCC_PORTE_OFFSET        (0x134u)
/* define PCC's register base */ 
#define PCC_PORTA_BASE           (0x40065124u)		//(PCC_BASE + PCC_PORTA_OFFSET)
#define PCC_PORTB_BASE           (0x40065128u)		//(PCC_BASE + PCC_PORTB_OFFSET)
#define PCC_PORTC_BASE           (0x4006512cu)		//(PCC_BASE + PCC_PORTC_OFFSET)
#define PCC_PORTD_BASE           (0x40065130u)		//(PCC_BASE + PCC_PORTD_OFFSET)
#define PCC_PORTE_BASE           (0x40065134u)		//(PCC_BASE + PCC_PORTE_OFFSET)
#define PCC_LPIT_BASE						 (0x400650dcu)		//(PCC_BASE + PCC_LPIT_OFFSET )
#define PCC_LPSPI_BASE					 (0x400650b0u)		//(PCC_BASE + PCC_LPSPI_OFFSET)
/* define PCC's register */
#define PCC							((PCC_t *)PCC_LPSPI_BASE)


#endif
